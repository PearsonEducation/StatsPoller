#### StatsPoller configuration options



### 'Core' configuration options
#
# global_metric_name_prefix : The value of the global metric name prefix.
#                             It is recommended that this be set to a value that will allow a consumer of the metrics to identify the system sending the metrics.
#                             To have StatsPoller insert the OS hostname into this field, enter: $HOSTNAME. Example: my_network_group.$HOSTNAME
#                             If using Amazon Web Services (AWS), to have StatsPoller insert the OS AWS Instance-ID into this field, enter: $AWS-INSTANCE-ID. Example: my_network_group.$AWS-INSTANCE-ID
#                             Default : The hostname of the system that is running StatsPoller. Comment out the 'global_metric_name_prefix' field to use the OS hostname.
#
# output_interval : Defines the interval, in seconds, that the output module(s) send metrics to their endpoints on.
#                   Default : 30
global_metric_name_prefix = server1.statspoller_agent
output_interval = 30



### 'Advanced Core' configuration options
#
# These settings rarely need to be adjusted. Don't adjust unless it is needed.
#
# check_output_files_interval : Defines the interval, in seconds, that 'external metric collector' output files are checked for new metrics.
#                               This value should typically be lower than your lowest metric collector collection interval.
#                               Default : 5
#
# always_check_output_files : Specifies whether 'external metric collector' output files are always read, in full, at the collection interval.
#                             If set to true, the files are read every time. The cost is higher overhead on disk IO, memory utilization, & CPU utilization.
#                             If set to false, the files are only read if the 'last modified' date on the file is newer than the last time this program read the file.
#                             If set to auto, then StatsPoller will set this variable to true for Windows systems & false for all other operating systems.
#                             If StatsPoller is having issues (especially related to memory), try setting this variable to false.
#                             Default : auto
#
# output_internal_metrics_to_disk : Internal metric collectors, such as the Linux metric collectors, can optionally output all their metrics to disk @ ./output/
#                                   This is not required, but it makes StatsPoller more transparent & can be useful in debugging. The performance overhead is marginal.
#                                   Default : true
#
# legacy_mode : Previous versions of StatsPoller were built/configured differently.
#               'legacy_mode' makes some adjustments to add compatibility layer for older version configurations of StatsPoller.
#               Specifically: 1) seconds are used in place of milliseconds in the config file. 2) Attempts may be made to read old StatsPoller config files for old plugins.
#                 Note 1: 'legacy_mode' should be set to 'false' for everyone who hasn't used StatsPoller 1.x releases.
#                 Note 2: Over time, this setting will be removed & set to 'false'.
#                 Node 3: Valid values: 'true', 'false', 'auto'
#               Default : auto
check_output_files_interval = 5
always_check_output_files = auto
output_internal_metrics_to_disk = true
legacy_mode = auto



### 'Sending data to Graphite' configuration options
#
# graphite_output_module_n : StatsPoller supports outputting to multiple Graphite endpoints. Each Graphite endpoint is defined in StatsPoller via a 'Graphite Output Module'.
#                            The format for a 'Graphite Output Module' is: graphite_output_module_n = graphite_output_enabled,graphite_host,graphite_port,graphite_num_send_retry_attempts,graphite_max_metrics_per_message,graphite_sanitize_metric_path,graphite_substitute_characters
#                              graphite_output_enabled : Enables sending metrics to Graphite. Valid values are 'true' or 'false'.
#                              graphite_host : The domain, hostname, or IP address that Graphite runs on (which this application will send metrics to).
#                              graphite_port : The port that Graphite runs on (which this application will send metrics to). Graphite servers usually listen on port 2003.
#                              graphite_num_send_retry_attempts : The number of times to retry sending metrics to this Graphite output module before giving up. A recommended retry count is 2.
#                              graphite_max_metrics_per_message : The maximum number of metrics to send via TCP in a single TCP 'send' invocation. A recommended value is 1000.
#                              graphite_sanitize_metric_path : Removes all cases of two '.' characters in a row. Valid values are 'true' or 'false'.
#                              graphite_substitute_characters : Some characters don't work well in Graphite, such as '%[]{}()'.
#                                                               Setting this to 'true' lets StatsPoller make some character substitutions to be more compatible with Graphite. Valid values are 'true' or 'false'.
#                                                               Example: % -> Pct
#
#                              Note: the 'n' at the end of 'graphite_output_module_n' is a number that is unique to that output module.
#                            Examples: graphite_output_module_1 = true,graphite.some-domain.com,2003,2,1000,true,false
#                                      graphite_output_module_2 = true,graphite.some-other-domain.com,2003,3,1000,true,true
graphite_output_module_1 = false,graphite.some-domain.com,2003,2,1000,true,true



### 'Sending data to OpenTSDB' configuration options
#
# opentsdb_telnet_output_module_n : StatsPoller supports outputting to multiple OpenTSDB endpoints. Each 'OpenTSDB via Telnet' endpoint is defined in StatsPoller via a 'OpenTSDB Telnet Output Module'.
#                                   This output format is supported by OpenTSDB 1.0+
#                                   If you are outputting metrics to an OpenTSDB server this module (telnet), then you should not output to the same server via HTTP.
#                                   The format for a 'OpenTSDB Telnet Output Module' is: opentsdb_telnet_output_module_n = opentsdb_telnet_output_enabled,opentsdb_telnet_host,opentsdb_telnet_port,opentsdb_telnet_num_send_retry_attempts,opentsdb_telnet_sanitize_metric
#                                     opentsdb_telnet_output_enabled : Enables sending metrics to this OpenTSDB output module. Valid values are 'true' or 'false'.
#                                     opentsdb_telnet_host : The domain, hostname, or IP address that OpenTSDB's telnet interface runs on (which this application will send metrics to).
#                                     opentsdb_telnet_port : The port that OpenTSDB's telnet interface runs on (which this application will send metrics to). OpenTSDB's telnet interface usually listen on port 4242.
#                                     opentsdb_telnet_num_send_retry_attempts : The number of times to retry sending metrics to this OpenTSDB output module before giving up. A recommended retry count is 2.
#                                     opentsdb_telnet_sanitize_metric : Removes all characters from the OpenTSDB 'metric' that are not officially allowed by OpenTSDB (per OpenTSDB documentation). Valid values are 'true' or 'false'.
#                                   Note: the 'n' at the end of 'opentsdb_telnet_output_module_n' is a number that is unique to that output module.
#                                   Examples: opentsdb_telnet_output_module_1 = true,opentsdb.some-domain.com,4242,2,true
#                                             opentsdb_telnet_output_module_2 = true,opentsdb.some-other-domain.com,4242,3,false
#
# opentsdb_http_output_module_n : StatsPoller supports outputting to multiple OpenTSDB endpoints. Each 'OpenTSDB via HTTP' endpoint is defined in StatsPoller via a 'OpenTSDB HTTP Output Module'.
#                                 This output format is supported by OpenTSDB 2.0+
#                                 The format for a 'OpenTSDB HTTP Output Module' is: opentsdb_http_output_module_n = opentsdb_http_output_enabled,opentsdb_http_url,opentsdb_http_num_send_retry_attempts,opentsdb_http_max_metrics_per_message,opentsdb_http_sanitize_metric
#                                   opentsdb_http_output_enabled : Enables sending metrics to this OpenTSDB output module. Valid values are 'true' or 'false'.
#                                   opentsdb_http_url : The url that you want to send OpenTSDB metrics to. This is generally expected to follow the convention of "http://domain:port/api/put".
#                                   opentsdb_http_num_send_retry_attempts : The number of times to retry sending metrics to this OpenTSDB output module before giving up. A recommended retry count is 2.
#                                   opentsdb_http_max_metrics_per_message : The maximum number of metrics to put in a single JSON package & submit to OpenTSDB via a HTTP POST.  A recommended value is 5.
#                                   opentsdb_http_sanitize_metric : Removes all characters from the OpenTSDB 'metric' that are not officially allowed by OpenTSDB (per OpenTSDB documentation). Valid values are 'true' or 'false'.
#                                 Note 1: The 'n' at the end of 'opentsdb_http_output_module_n' is a number that is unique to that output module.
#                                 Note 2: If you are outputting metrics to an OpenTSDB server this module (HTTP), then you should not output to the same OpenTSDB server via telnet.
#                                 Examples: opentsdb_http_output_module_1 = true,http://My-OpenTsdb-Server.com:4242/api/put,2,5,true
#                                           opentsdb_http_output_module_2 = true,http://My-Other-OpenTsdb-Server.com:4242/api/put,2,10,false
opentsdb_telnet_output_module_1 = false,opentsdb.some-domain.com,4242,2,true
opentsdb_http_output_module_1 = false,http://opentsdb.some-domain.com:4242/api/put,2,5,true



### 'StatsPoller Native metric collectors' configuration options
#
# statspoller_metric_collector_prefix : StatsPoller can natively output a few metrics (version, availability, Java-collected OS metrics).
#                                       This variable controls the metric prefix that is put in front of these fields.
#                                       Default : StatsPoller
#
# statspoller_enable_java_metric_collector : StatsPoller is capable of gathering OS metrics from StatsPoller's runtime JVM.
#                                            Metrics include CPU, Physical-Memory, Swap-Space, Disk-Space, File-Descriptors.
#                                            Beyond the JVM, there are no additional runtime dependencies.
#                                            Collection of these metrics is only guaranteed to work with Oracle Java. OpenJDK is unlikely to work with this collector.
#                                            Default : true
#
# statspoller_java_metric_collector_collection_interval : This controls how often the 'StatsPoller Java Metrics Collector' collects metrics (value in seconds)
#                                                         Default : 30
statspoller_metric_collector_prefix = StatsPoller
statspoller_enable_java_metric_collector = true
statspoller_java_metric_collector_collection_interval = 30



### 'Linux metric collectors' configuration options
#
# linux_metric_collector_enable : StatsPoller has built-in Linux metric collectors for core Linux OS metrics.
#                                 Collectors include: FileSystem (disk-space, inodes), Disk IO, Network Connections, Network usage, Cpu usage, Memory usage, and Uptime
#                                 Most collectors only depend the data in /proc. However, the FileSystem collector does require that the 'df' command be installed/functional.
#                                 Valid settings are: 'true' (enables the collectors), 'false' (disables the collectors), 'auto' (enabled if OS is Linux)
#                                 Default : auto
#
# linux_proc_location : The location of the proc filesystem. This is almost always /proc & usually does not need to be explictly set.
#                       Default : /proc
#
# linux_sys_location : The location of the proc filesystem. This is almost always /sys & usually does not need to be explictly set.
#                      Default : /sys
#
# linux_metric_collector_collection_interval : This controls how often the 'Linux metric collectors' collect metrics (value in seconds)
#                                              Default : 30
linux_metric_collector_enable = auto
linux_proc_location = /proc
linux_sys_location = /sys
linux_metric_collector_collection_interval = 30



### 'Process counter metric collectors' configuration options
#
# The 'Process counter metric collector' counts of the number of processes that match the specified regex pattern.
# The regex looks at the full command-line command that was used to launch the process.
# This collector is currently Linux-only, though Windows support will be added in the future.
#
# Example: if the process launch command was: "/usr/lib/firefox/firefox safemode taco"
#          you count the number of processes running firefox with "firefox"
#          or you could count the number of processes running firefox taco-edition (TE) with "firefox.*taco"
#
# process_counter_interval : The interval, in seconds, that the 'Process counter metric collector' will collect metrics.
#                            All regexes specified in 'process_counter_regex' will be checked on this interval.
#                            Note: This setting can only be set in the /conf/application.properties file. Setting in other properties files will not work.
#                            Default : 30
#
# process_counter_regex : CSV position 1: A human-readable identifer used in outputting the process count. This identifier should be unique amongst 'process_counter_regex' identifiers.
#                         CSV position 2: A Java regex (using Java's pattern.matcher.find() mechanism) to match against your process
#                         Format: process_counter_regex = (unique identifer that will be output),(regex)
#                         Example: process_counter_regex = CountOfAllMyRunningJavaProcesses,java
#                         Default : (null)
process_counter_interval = 30
process_counter_regex = Java,java
process_counter_regex = MySQL,mysql



### 'File-Counter metric collector' configuration options
#
# The 'File-Counter metric collector' does exactly what it says: it counts the number of files in a folder.
# This collector works on all operating systems.
#
# Format: file_counter = (path of folder),(count files in subfolders?),(metric collection interval - in seconds),(prefix)
# Example: file_counter = /tmp/myfolder,true,30,MyFileCounts
file_counter = /tmp,true,30,MyFileCounts
file_counter = /etc,false,30,MyEtcFileCount



### 'External metric collectors' configuration options
#
# External metric collectors are external programs or scripts that produce Graphite-formatted or OpenTSDB-formatted output files.
# These metric collectors are executed by this program on whatever interval is specified.
# The external metric collector can put its output file anywhere, so the output file location must be specified.
# This program prepends a specified metric prefix on the metric path of each of the metrics in the output file.
#
# Format: metric_collector = (path of program to execute),(metric collection interval - in seconds),(path of metric collector output file),(prefix added to all metric paths from this metric collector)
# Example: metric_collector = ./bin/vmstat_collector.sh,15,./output/vmstat_collector_output.out,vmstat
#
# Note: All fields are mandatory (even if a field is blank)
metric_collector = python ./bin/uptime_poller.py,30,./output/uptime_poller.out,uptime
metric_collector = python ./bin/df_poller.py,30,./output/df_poller.out,df



### 'JMX metric collector' configuration options
#
# Java Management Extensions (JMX) can offer a large variety of metrics from a target Java Virtual Machine (JVM).
# To retrieve JMX metrics from a Java application, one must enable 'remote JMX' on the target JVM.
#
# jmx_enabled : Controls whether JMX metric collector is enabled.
#               Default : false
#
# jmx_host : The host (hostname or IP-address) of server that is running the Java process to be monitored.
#            Default : (null) -- this is a required field (unless a service url is used)
#
# jmx_port : The JMX port (0 - 65535) of the Java process to be monitored.
#            Default : (-1) -- this is a required field (unless a service url is used)
#
# jmx_service_url : When connecting to JMX via a service url, enter the entire url into this variable.
#                   When this field is used, the 'jmx_host' & 'jmx_port' variables are ignored.
#                   Example: service:jmx:http-remoting-jmx://127.0.0.1:9090
#                   Default : (null)
#
# jmx_username : The JMX username (if any).
#                Default : (blank)
#
# jmx_password : The JMX password (if any).
#                Default : (blank)
#
# jmx_collection_interval : The interval, in seconds, that the JMX metric collector will collect metrics.
#                           Default : 30
#
# jmx_num_connection_attempt_retries : On each iteration of JMX metric collection, this application will attempt to make a JMX connection (if one doesn't already exist).
#                                      This option controls the number of connection attempt retries to make on a given iteration.
#                                      Default : 3
#
# jmx_sleep_after_connect_time : After making a JMX connection, wait for 'jmx_sleep_after_connect_time' seconds before continuing with the JMX metric collection routine.
#                                This feature was added to give the target JVM time to fully initialize before polling for JMX metrics.
#                                If it takes the JVM 10 seconds to fully initialize, then you may want to set this field to 20 seconds.
#                                Note 1: Under normal circumstances, the JMX collector will only make a single connection the the target JVM.
#                                        That means that this 'sleep time' is meant to be a one-time occurrence for the first time that StatsPoller connects to the JVM.
#                                Default : 30
#
# jmx_query_metric_tree : On each iteration, the JMX metric collector can query for all available JMX metrics from a JVM. This allows for new JMX metrics paths to be discovered as the monitored JVM runs,
#                         but it comes with a performance penalty. The alternative is to poll for the full list of available JMX metrics occasionally (or just once).
#                         Setting this value less than or equal to -1 will cause the JMX metric collector to query for the full list on every iteration.
#                         Setting this value to 0 will cause the JMX metric collector to query for the full list exactly once (on the first iteration).
#                         Setting this value to any value greater than 0 will cause the JMX metric collector to query for the full list every X seconds (where X is the value specified)
#                         Default : 300
#
# jmx_collect_string_attributes : When this field is set to 'true', JMX attributes that have string values are allowed to be collected.
#                                 When string attributes are collected, they will have a metric path of 'attributeKey=attributeValue', and a metric value of 1
#                                 Example (in Graphite format): system.os=Windows 1 1420561594
#                                 Default : false
#
# jmx_derived_metrics_enabled : Enables/disables derived metric collection & calculations. Derived metrics take some common JMX metrics, do some operations on them, and create new 'derived metrics' out of them.
#                               For example, one derived metric is 'Overall Heap Usage %', which is derived by dividing the JMX metrics HeapUsed/HeapMax.
#                               Because derived metrics adds a small overhead (polls the target JVM for more metrics & does computations on the results), this setting is optional.
#                               Default : true
#
# jmx_metric_prefix : A prefix that is appended to all JMX metrics that are collected by this JMX collector. It is appended after the global_metric_prefix.
#                     This metric prefix should be unique to this particular JMX collector. Having multiple JMX collectors with the same metric prefix would result in a namespace collision.
#                     Default : JMX
#
# jmx_blacklist_objectname_regex : A Java regular expression for blacklisting JMX metrics for an entire mBean. If multiple blacklist rules are needed, add them on separate lines (using the same key of 'jmx_blacklist_regex')
#                                  Note 1: 'blacklist objectname regex' statements are executed against the raw 'mBean object names'.
#                                          They are NOT executed against the final output format (graphite format). 'jmx_blacklist_regex' is used to blacklist metrics in the final output format.
#                                  Note 2: You can view mBean object names in tools like VisualVM. After installing the MBeans plugin in VisualVM, goto the MBeans tab of a JVM, find a mBean, & click on it.
#                                          In the details of the bean, click on the 'metadata' tab. The 'ObjectName' field is what 'blacklist objectname regex' statements are executed against.
#                                  Note 3: 'blacklist objectname regex' statements are executed against mBean objects, but NOT their attributes.
#                                          You won't be able to blacklist attribute names unless you blacklist out the entire mBean object.
#                                  Note 4: Generally speaking, using blacklist rules that operate against the final output are recommended.
#                                          Blacklisting 'mbean object names' was added as a safeguard to ensure that blacklisted mBeans are NEVER asked for their attribute value(s).
#                                  Example: jmx_blacklist_objectname_regex=java\.lang.*type=.*
#                                  Default : (blank) -- effectively means that no metrics are blacklisted by default
#
# jmx_blacklist_regex : A Java regular expression for blacklisting JMX metrics. If multiple blacklist rules are needed, add them on separate lines (using the same key of 'jmx_blacklist_regex')
#                         Note 1: blacklist rules take priority over whitelist rules
#                         Note 2: the 'jmx metric prefix' & 'global metric prefix' are applied after the JMX blacklist routine is executed. Write your blacklist regex as though the metric prefixes are not present.
#                         Note 3: 'blacklist regex' statements are executed against the final output format (graphite format, etc)
#                         Example: jmx_blacklist_regex=.*SomeJmxOjbect\.Memory\..+
#                         Default : (blank) -- effectively means that no metrics are blacklisted by default
#
# jmx_whitelist_regex : A Java regular expression for whitelisting JMX metrics. If multiple whitelist rules are needed, add them on separate lines (using the same key of 'jmx_whitelist_regex')
#                       Note 1: blacklist rules take priority over whitelist rules
#                       Note 2: the 'jmx metric prefix' & 'global metric prefix' are applied after the JMX whitelist routine is executed. Write your whitelist regex as though the metric prefixes are not present.
#                       Note 3: regex statements are executed against the final output format (graphite format, etc)
#                       Note 4: If one or more regex(s) are used for whitelisting, then ONLY metrics that fit the whitelist criteria will be outputted.
#                               If no whitelist regex is specified, then all metrics (that aren't blacklisted) will be allowed to be outputted.
#                       Example: jmx_whitelist_regex=.*SomeJmxOjbect\.Memory\..+
#                       Default : (blank) -- effectively means that all metrics are whitelisted by default
jmx_enabled = false
jmx_host = 127.0.0.1
jmx_port = 9090
jmx_service_url =
jmx_username =
jmx_password =
jmx_collection_interval = 30
jmx_num_connection_attempt_retries = 3
jmx_sleep_after_connect_time = 30
jmx_query_metric_tree = 300
jmx_collect_string_attributes = false
jmx_derived_metrics_enabled = true
jmx_metric_prefix = JMX
#jmx_blacklist_objectname_regex = .*
#jmx_blacklist_regex = .*
#jmx_whitelist_regex = .*



### 'Apache HTTP metric collectors' configuration options
#
# 'Apache HTTP' is a popular HTTP server technology. They offer a variety of metrics via a webpage that they serve @ /server-status?auto
# To retrieve these metrics, one must enable the 'server status' module (mod_status) in Apache. Tested with Apache 2.2 & 2.4.
#
# apachehttp_enabled : Controls whether Apache HTTP metric collector is enabled.
#                      Default : false
#
# apachehttp_protocol : Controls whether to collect metrics via HTTP or HTTPS.
#                       Default : http
#
# apachehttp_host : The host (hostname or IP-address) of server that is running the Apache HTTP server to be monitored.
#                   Default : 127.0.0.1
#
# apachehttp_port : The port (0 - 65535) that the Apache HTTP server is listening on.
#                   Default : 80
#
# apachehttp_collection_interval : The interval, in seconds, that the Apache HTTP collector will collect metrics.
#                                  Default : 30
#
# apachehttp_metric_prefix : A prefix that is appended to all Apache HTTP metrics that are collected by this metric collector. It is appended after the global_metric_prefix.
#                            This metric prefix should be unique to this particular Apache HTTP collector. Having multiple Apache HTTP collectors with the same metric prefix would result in a namespace collision.
#                            Default : ApacheHttp
apachehttp_enabled = false
apachehttp_protocol = http
apachehttp_host = 127.0.0.1
apachehttp_port = 80
apachehttp_collection_interval = 30
apachehttp_metric_prefix = ApacheHttp



### 'cAdvisor metric collectors' configuration options
#
# cAdvisor is a container monitoring/analysis platform. They offer an HTTP API for programatic access to container metrics, which StatsPoller accesses.
#
# cadvisor_enabled : Controls whether cAdvisor metric collector is enabled.
#                    Default : false
#
# cadvisor_protocol : Controls whether to collect metrics via HTTP or HTTPS.
#                     Default : http
#
# cadvisor_host : The host (hostname or IP-address) of server that is running the cAdvisor instance to be monitored.
#                 Default : 127.0.0.1
#
# cadvisor_port : The port (0 - 65535) that the cAdvisor server is listening on.
#                 Default : 8080
#
# cadvisor_username : The username that StatsPoller will use to connect to cAdvisor. (note: this functionality is not complete yet)
#                     Default : (blank)
#
# cadvisor_password : The password that StatsPoller will use to connect to cAdvisor. (note: this functionality is not complete yet)
#                     Default : (blank)
#
# cadvisor_api_version : The version of the cAdvisor HTTP API to access. StatsPoller was developed against "v1.3". Using other versions of the API may cause issues.
#                        Default : v1.3
#
# cadvisor_collection_interval : The interval, in seconds, that the cAdvisor collector will collect metrics.
#                                Default : 30
#
# cadvisor_metric_prefix : A prefix that is appended to all cAdvisor metrics that are collected by this metric collector. It is appended after the global_metric_prefix.
#                          This metric prefix should be unique to this particular cAdvisor collector. Having multiple cAdvisor collectors with the same metric prefix may result in a namespace collision.
#                          Default : cAdvisor
cadvisor_enabled = false
cadvisor_protocol = http
cadvisor_host = 127.0.0.1
cadvisor_port = 8080
cadvisor_api_version = v1.3
cadvisor_collection_interval = 30
cadvisor_metric_prefix = cAdvisor



### 'MongoDB metric collectors' configuration options
#
# 'MongoDB' is a popular open-source relational database. They offer a variety of metrics that can be read from the database's metadata.
# To retrieve these metrics, one must be able to connect to Mongo with valid credentials & have permissions to query for metadata stats.
#
# mongo_enabled : Controls whether Mongo metric collector is enabled.
#                 Default : false
#
# mongo_host : The host (hostname or IP-address) of server that is running Mongo.
#              Default : 127.0.0.1
#
# mongo_port : The port (0 - 65535) that Mongo is listening on.
#              Default : 3306
#
# mongo_username : The username that StatsPoller will use to connect to Mongo.
#                  Default : (blank)
#
# mongo_password : The password that StatsPoller will use to connect to Mongo.
#                  Default : (blank)
#
# mongo_verbose_output : Enables the collection of additional metrics (wiredTiger metrics & indexDetails metrics)
#                        This can balloon the number of collected metrics from ~500 to ~5000. Most of the additional metrics aren't particularly useful, so this is disabled by default.
#                        Default : false
#
# mongo_collection_interval : The interval, in seconds, that the Mongo collector will collect metrics.
#                             Default : 60
#
# mongo_metric_prefix : A prefix that is appended to all Mongo metrics that are collected by this metric collector. It is appended after the global_metric_prefix.
#                       This metric prefix should be unique to this particular Mongo collector. Having multiple Mongo collectors with the same metric prefix would result in a namespace collision.
#                       Default : Mongo
mongo_enabled = false
mongo_host = 127.0.0.1
mongo_port = 3306
mongo_username =
mongo_password =
mongo_verbose_output = false
mongo_collection_interval = 60
mongo_metric_prefix = Mongo



### 'MySQL metric collectors' configuration options
#
# 'MySQL' is a popular open-source relational database. They offer a variety of metrics that can be read from the database's metadata.
# To retrieve these metrics, one must be able to connect to MySQL with valid credentials & have permissions to query for metadata stats.
#
# mysql_enabled : Controls whether MySQL metric collector is enabled.
#                 Default : false
#
# mysql_host : The host (hostname or IP-address) of server that is running MySQL.
#              Default : 127.0.0.1
#
# mysql_port : The port (0 - 65535) that MySQL is listening on.
#              Default : 3306
#
# mysql_username : The username that StatsPoller will use to connect to MySQL.
#                  Default : (blank)
#
# mysql_password : The password that StatsPoller will use to connect to MySQL.
#                  Default : (blank)
#
# mysql_jdbc : (optional) Enter a valid for this field if you prefer to build the entire JDBC connection string yourself.
#              Otherwise StatsPoller will build one out of host, port, username, password.
#              This can be useful if you want to connect to the database with specific connection string parameters, or if you want to use the MariaDB driver instead of the MySQL driver.
#              When you specify the the connection string yourself, you must include the username & password in the JDBC connection string.
#              The details host, port, username, password specified in 'mysql_jdbc' will override all the other host, port, username, password variable values
#              Example : jdbc:mysql://localhost:3306?user=admin&password=secret
#              Default : (blank)
#
# mysql_collection_interval : The interval, in seconds, that the MySQL collector will collect metrics.
#                             Default : 60
#
# mysql_metric_prefix : A prefix that is appended to all MySQL metrics that are collected by this metric collector. It is appended after the global_metric_prefix.
#                       This metric prefix should be unique to this particular MySQL collector. Having multiple MySQL collectors with the same metric prefix would result in a namespace collision.
#                       Default : MySQL
mysql_enabled = false
mysql_host = 127.0.0.1
mysql_port = 3306
mysql_username =
mysql_password =
mysql_jdbc =
mysql_collection_interval = 60
mysql_metric_prefix = MySQL



### 'PostgreSQL metric collectors' configuration options
#
# 'PostgreSQL' is a popular open-source relational database. They offer a variety of metrics that can be read from the database's metadata.
# To retrieve these metrics, one must be able to connect to PostgreSQL with valid credentials & have permissions to query for metadata stats.
#
# postgres_enabled : Controls whether PostgreSQL metric collector is enabled.
#                    Default : false
#
# postgres_host : The host (hostname or IP-address) of server that is running PostgreSQL.
#                 Default : 127.0.0.1
#
# postgres_port : The port (0 - 65535) that PostgreSQL is listening on.
#                 Default : 5432
#
# postgres_datbase : Name of the database to connect to
#                    Default : postgres
#
# postgres_username : The username that StatsPoller will use to connect to PostgreSQL.
#                     Default : (blank)
#
# postgres_password : The password that StatsPoller will use to connect to PostgreSQL.
#                     Default : (blank)
#
# postgres_jdbc : (optional) Enter a valid for this field if you prefer to build the entire JDBC connection string yourself.
#                 Otherwise StatsPoller will build one out of host, port, username, password.
#                 This can be useful if you want to connect to the database with specific connection string parameters.
#                 When you specify the the connection string yourself, you must include the username & password in the JDBC connection string.
#                 The details host, port, username, password specified in 'postgresql_jdbc' will override all the other host, port, username, password variable values
#                 Example : jdbc:postgresql://localhost:3306?user=admin&password=secret
#                 Default : (blank)
#
# postgres_collection_interval : The interval, in seconds, that the PostgreSQL collector will collect metrics.
#                                Default : 60
#
# postgres_metric_prefix : A prefix that is appended to all PostgreSQL metrics that are collected by this metric collector. It is appended after the global_metric_prefix.
#                          This metric prefix should be unique to this particular PostgreSQL collector. Having multiple PostgreSQL collectors with the same metric prefix would result in a namespace collision.
#                          Default : PostgreSQL
postgresql_enabled = false
postgresql_host = 127.0.0.1
postgresql_port = 3306
postgresql_username =
postgresql_password =
postgresql_jdbc =
postgresql_collection_interval = 60
postgresql_metric_prefix = Postgres



### 'Database querier metric collectors' configuration options
#
# The 'database querier' metric collector runs user-specified queries against a user-specified database (specified via a JDBC connection string).
# The custom queries are expected to be lightweight (execute quickly) & are generally expected to query for business metrics.
# If multiple queries are specified, they will be executed sequentially (serially).
#
# Supported databases are: MariaDB, MySQL, PostgreSQL
#
# db_querier_enabled : Controls whether the 'database querier' metric collector is enabled.
#                      Default : false
#
# db_querier_username : The username that StatsPoller will use to connect to the database.
#                       Default : (blank)
#
# db_querier_password : The password that StatsPoller will use to connect to the database.
#                       Default : (blank)
#
# db_querier_jdbc : The JDBC connection string. Do not include username & password in the connection string (those can be specified in db_querier_username & db_querier_password).
#                   Example : jdbc:mysql://localhost:3306
#                   Default : (blank)
#
# db_querier_collection_interval : The interval, in seconds, that the 'database querier' collector will collect metrics.
#                                  Default : 60
#
# db_querier_metric_prefix : A prefix that is appended to all 'database querier' metrics that are collected by this metric collector. It is appended after the global_metric_prefix.
#                       This metric prefix should be unique to this particular 'database querier' collector.
#                       Having multiple 'database querier' collectors with the same metric prefix could result in a namespace collision.
#                       Default : DB_Querier
#
# db_querier_query : The database query to be executed. There can be multiple rows 'db_querier_query' queries in this configuration file, allowing you to execute multiple queries.
#                    The queries executed follow these guidelines: They must be read-only. The query results are expected to have 2 columns (STAT_NAME & STAT_VALUE).
#                    The queries can return multiple rows, but the 'STAT_NAME' value must be unique for each row returned. The columns are:
#                         Column 1: STAT_NAME   (a string -- an meaningful name for the metric. The character-set should stick to letters, numbers, dashes, and underscores)
#                         Column 2: STAT_VALUE  (a numeric value of any type)
#                    Default : (blank)
#                    Example: db_querier_query = select 'MyMetric' as STAT_NAME, count(*) as STAT_VALUE from MyTable
db_querier_enabled = false
db_querier_username =
db_querier_password =
db_querier_jdbc =
db_querier_collection_interval = 60
db_querier_metric_prefix = DB_Querier
db_querier_query =
db_querier_query =
